{"ast":null,"code":"var _jsxFileName = \"/Users/Steven/CS-Projects/portfolio-template/portfolioWebsite/client/src/App/securePages/uploadImages.js\";\n// based on tutorial here: https://codeburst.io/image-uploading-using-react-and-node-to-get-the-images-up-c46ec11a7129\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport ImageUploader from \"react-images-upload\";\n\nconst FileReader = require('filereader');\n\nexport default class Contact extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageArray: []\n    };\n  }\n\n  buildImgTag() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"photo-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 14\n      }\n    }, this.state.imageArray.map(imageURI => /*#__PURE__*/React.createElement(\"img\", {\n      className: \"photo-uploaded\",\n      src: imageURI,\n      alt: \"Photo uploaded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 10\n      }\n    })));\n  }\n\n  readURI(e) {\n    if (e.target.files) {\n      const files = Array.from(e.target.files);\n      Promise.all(files.map(file => {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.addEventListener('load', ev => {\n            resolve(ev.target.result);\n          });\n          reader.addEventListener('error', reject);\n          reader.readAsDataURL(file);\n        });\n      })).then(images => {\n        /* Once all promises are resolved, update state with image URI array */\n        this.setState({\n          imageArray: images\n        });\n      }, error => {\n        console.error(error);\n      });\n    }\n  }\n\n  handleChange(e) {\n    this.readURI(e);\n\n    if (this.props.onChange !== undefined) {\n      this.props.onChange(e);\n    }\n  }\n\n  render() {\n    const imgTag = this.buildImgTag();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-upload-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"main-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 6\n      }\n    }, \" Upload an Image \"), /*#__PURE__*/React.createElement(\"form\", {\n      method: \"post\",\n      action: \"\",\n      encType: \"multipart/form-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      name: \"\",\n      id: \"richTextArea\",\n      placeholder: \"Filler text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }), imgTag, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"theRibbon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: this.state.id,\n      type: \"file\",\n      name: \"\",\n      accept: \"image/gif,image/jpeg,image/jpg,image/png,video/mp4,video/x-m4v\",\n      title: \"Add photos or video\",\n      onChange: this.handleChange.bind(this),\n      multiple: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"tweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 19\n      }\n    }, \"Tweet\"))));\n  }\n\n}","map":{"version":3,"sources":["/Users/Steven/CS-Projects/portfolio-template/portfolioWebsite/client/src/App/securePages/uploadImages.js"],"names":["React","Component","axios","ImageUploader","FileReader","require","Contact","constructor","props","state","imageArray","buildImgTag","map","imageURI","readURI","e","target","files","Array","from","Promise","all","file","resolve","reject","reader","addEventListener","ev","result","readAsDataURL","then","images","setState","error","console","handleChange","onChange","undefined","render","imgTag","id","bind"],"mappings":"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","sourcesContent":["// based on tutorial here: https://codeburst.io/image-uploading-using-react-and-node-to-get-the-images-up-c46ec11a7129\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport ImageUploader from \"react-images-upload\";\nconst FileReader = require('filereader');\nexport default class Contact extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n      this.state ={\n          imageArray: [],\n      };\n   \t}\n\n  buildImgTag(){\n\n      return <div className=\"photo-container\">\n      { \n        this.state.imageArray.map(imageURI => \n        (<img className=\"photo-uploaded\" src={imageURI} alt=\"Photo uploaded\"/>)) \n      }\n      </div>\n  }\n\n  readURI(e){\n      if (e.target.files) {\n\n          const files = Array.from(e.target.files);\n\n          Promise.all(files.map(file => {\n              return (new Promise((resolve,reject) => {\n                  const reader = new FileReader();\n                  reader.addEventListener('load', (ev) => {\n                      resolve(ev.target.result);\n                  });\n                  reader.addEventListener('error', reject);\n                  reader.readAsDataURL(file);\n              }));\n          }))\n          .then(images => {\n\n              /* Once all promises are resolved, update state with image URI array */\n              this.setState({ imageArray : images })\n\n          }, error => {        \n              console.error(error);\n          });\n      }\n  }\n\n  handleChange(e){\n    this.readURI(e);\n    if(this.props.onChange !== undefined){\n      this.props.onChange(e);\n    }\n  }\n\n  render(){\n    const imgTag = this.buildImgTag();\n\n  \treturn(\n  \t\t<div className=\"main-upload-container\"> \n  \t\t\t<h3 className=\"main-heading\"> Upload an Image </h3>\n          <form method=\"post\" action=\"\" encType=\"multipart/form-data\">\n              <textarea name=\"\" id=\"richTextArea\" placeholder=\"Filler text\"></textarea>\n              {imgTag}\n              <div id=\"theRibbon\">\n                  <div>\n                      <input\n                          id={this.state.id}\n                          type=\"file\"\n                          name=\"\"\n                          accept=\"image/gif,image/jpeg,image/jpg,image/png,video/mp4,video/x-m4v\"\n                          title=\"Add photos or video\"\n                          onChange={this.handleChange.bind(this)}\n                          multiple\n                      />\n                  </div>\n                  <button type=\"submit\" className=\"tweet\">Tweet</button>\n              </div>\n          </form>\n  \t\t</div>\n  \t)\n  }\n }\n\n"]},"metadata":{},"sourceType":"module"}