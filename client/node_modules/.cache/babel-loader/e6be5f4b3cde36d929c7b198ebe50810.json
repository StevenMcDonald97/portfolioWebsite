{"ast":null,"code":"import{BehaviorSubject}from'rxjs';import axios from'axios';var currentUserSubject=new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));export var authenticationService={login:login,logout:logout,currentUser:currentUserSubject.asObservable(),get currentUserValue(){return currentUserSubject.value;}};function login(email,password,redirect){axios.post(\"/user/authenticate\",{email:email,password:password}).then(handleResponse).then(function(response){// store user details and jwt token in local storage to keep user logged in between page refreshes\nlocalStorage.setItem('currentUser',JSON.stringify(response.token));currentUserSubject.next(response);redirect();return response;}).catch(function(err){alert(\"Login info is incorrect!\");return{};});}function logout(){// remove user from local storage to log user out\nlocalStorage.removeItem('currentUser');currentUserSubject.next(null);alert(\"Logged out\");}function handleResponse(response){var data=response.data;// if (!response.ok) {\n//     if ([401, 403].indexOf(response.status) !== -1) {\n//         // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n//         logout();\n//         // location.reload(true);\n//     }\n//     const error = (data && data.message) || response.statusText;\n//     return Promise.reject(error);\n// }\nreturn data;}","map":{"version":3,"sources":["/Users/Steven/CS-Projects/portfolio-template/portfolioWebsite/client/src/App/admin/authentication/authenticationService.js"],"names":["BehaviorSubject","axios","currentUserSubject","JSON","parse","localStorage","getItem","authenticationService","login","logout","currentUser","asObservable","currentUserValue","value","email","password","redirect","post","then","handleResponse","response","setItem","stringify","token","next","catch","err","alert","removeItem","data"],"mappings":"AAAA,OAASA,eAAT,KAAgC,MAAhC,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,GAAIF,CAAAA,eAAJ,CAAoBG,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CAApB,CAA3B,CAEA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,CACjCC,KAAK,CAALA,KADiC,CAEjCC,MAAM,CAANA,MAFiC,CAGjCC,WAAW,CAAER,kBAAkB,CAACS,YAAnB,EAHoB,CAIjC,GAAIC,CAAAA,gBAAJ,EAAwB,CAAE,MAAOV,CAAAA,kBAAkB,CAACW,KAA1B,CAAiC,CAJ1B,CAA9B,CAOP,QAASL,CAAAA,KAAT,CAAeM,KAAf,CAAsBC,QAAtB,CAAgCC,QAAhC,CAA0C,CACtCf,KAAK,CAACgB,IAAN,sBAAiC,CAAEH,KAAK,CAACA,KAAR,CAAeC,QAAQ,CAACA,QAAxB,CAAjC,EACCG,IADD,CACMC,cADN,EAECD,IAFD,CAEM,SAAAE,QAAQ,CAAI,CACd;AACAf,YAAY,CAACgB,OAAb,CAAqB,aAArB,CAAoClB,IAAI,CAACmB,SAAL,CAAeF,QAAQ,CAACG,KAAxB,CAApC,EACArB,kBAAkB,CAACsB,IAAnB,CAAwBJ,QAAxB,EACAJ,QAAQ,GACR,MAAOI,CAAAA,QAAP,CACH,CARD,EAQGK,KARH,CAQS,SAAAC,GAAG,CAAI,CACZC,KAAK,CAAC,0BAAD,CAAL,CACA,MAAO,EAAP,CACH,CAXD,EAYH,CAED,QAASlB,CAAAA,MAAT,EAAkB,CACd;AACAJ,YAAY,CAACuB,UAAb,CAAwB,aAAxB,EACA1B,kBAAkB,CAACsB,IAAnB,CAAwB,IAAxB,EACAG,KAAK,CAAC,YAAD,CAAL,CACH,CAED,QAASR,CAAAA,cAAT,CAAwBC,QAAxB,CAAkC,CAC9B,GAAMS,CAAAA,IAAI,CAAGT,QAAQ,CAACS,IAAtB,CAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,MAAOA,CAAAA,IAAP,CAEH","sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport axios from 'axios';\n\nconst currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n\nexport const authenticationService = {\n    login,\n    logout,\n    currentUser: currentUserSubject.asObservable(),\n    get currentUserValue () { return currentUserSubject.value }\n};\n\nfunction login(email, password, redirect) {\n    axios.post(`/user/authenticate`, { email:email, password:password })\n    .then(handleResponse)\n    .then(response => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        localStorage.setItem('currentUser', JSON.stringify(response.token));\n        currentUserSubject.next(response);\n        redirect();\n        return response;\n    }).catch(err => {       \n        alert(\"Login info is incorrect!\");\n        return {};\n    });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    currentUserSubject.next(null);\n    alert(\"Logged out\");\n}\n\nfunction handleResponse(response) {   \n    const data = response.data;\n\n    // if (!response.ok) {\n\n    //     if ([401, 403].indexOf(response.status) !== -1) {\n    //         // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n    //         logout();\n    //         // location.reload(true);\n    //     }\n\n    //     const error = (data && data.message) || response.statusText;\n    //     return Promise.reject(error);\n    // }\n\n    return data;\n\n}"]},"metadata":{},"sourceType":"module"}