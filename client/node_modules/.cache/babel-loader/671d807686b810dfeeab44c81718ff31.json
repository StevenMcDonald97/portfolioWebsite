{"ast":null,"code":"var _jsxFileName = \"/Users/Steven/CS-Projects/portfolio-template/portfolioWebsite/client/src/App/admin/authentication/privateRoute.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { authenticationService } from 'App/admin/authentication/authenticationService';\nexport const PrivateRoute = ({\n  component: Component,\n  roles,\n  ...rest\n}) => /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n  render: props => {\n    const currentUser = authenticationService.currentUserValue;\n\n    if (!currentUser) {\n      // not logged in so redirect to login page with the return url\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: {\n          pathname: '/login',\n          state: {\n            from: props.location\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 20\n        }\n      });\n    } // check if route is restricted by role\n\n\n    if (roles && roles.indexOf(currentUser.role) === -1) {\n      // role not authorised so redirect to home page\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: {\n          pathname: '/'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 20\n        }\n      });\n    } // authorised so return component\n\n\n    return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 16\n      }\n    }));\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }\n}));","map":{"version":3,"sources":["/Users/Steven/CS-Projects/portfolio-template/portfolioWebsite/client/src/App/admin/authentication/privateRoute.js"],"names":["React","Route","Redirect","authenticationService","PrivateRoute","component","Component","roles","rest","props","currentUser","currentUserValue","pathname","state","from","location","indexOf","role"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,qBAAT,QAAsC,gDAAtC;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,KAAxB;AAA+B,KAAGC;AAAlC,CAAD,kBACxB,oBAAC,KAAD,oBAAWA,IAAX;AAAiB,EAAA,MAAM,EAAEC,KAAK,IAAI;AAC9B,UAAMC,WAAW,GAAGP,qBAAqB,CAACQ,gBAA1C;;AACA,QAAI,CAACD,WAAL,EAAkB;AACd;AACA,0BAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AAAEE,UAAAA,QAAQ,EAAE,QAAZ;AAAsBC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAEL,KAAK,CAACM;AAAd;AAA7B,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAL6B,CAO9B;;;AACA,QAAIR,KAAK,IAAIA,KAAK,CAACS,OAAN,CAAcN,WAAW,CAACO,IAA1B,MAAoC,CAAC,CAAlD,EAAqD;AACjD;AACA,0BAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AAAEL,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAX6B,CAa9B;;;AACA,wBAAO,oBAAC,SAAD,oBAAeH,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACH,GAfD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADG","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { authenticationService } from 'App/admin/authentication/authenticationService';\n\nexport const PrivateRoute = ({ component: Component, roles, ...rest}) => (\n    <Route {...rest} render={props => {\n        const currentUser = authenticationService.currentUserValue;\n        if (!currentUser) {\n            // not logged in so redirect to login page with the return url\n            return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n        }\n\n        // check if route is restricted by role\n        if (roles && roles.indexOf(currentUser.role) === -1) {\n            // role not authorised so redirect to home page\n            return <Redirect to={{ pathname: '/'}} />\n        }\n\n        // authorised so return component\n        return <Component {...props} />\n    }} />\n)\n\n"]},"metadata":{},"sourceType":"module"}