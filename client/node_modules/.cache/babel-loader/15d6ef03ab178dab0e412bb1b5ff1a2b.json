{"ast":null,"code":"var _jsxFileName = \"/Users/Steven/CS-Projects/portfolio-template/portfolioWebsite/client/src/App/pages/portfolio.js\";\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport axios from 'axios';\nimport Modal from 'App/pages/modal';\nvar listOfImages = [];\n\nconst images = require.context('App/upload', true);\n\nexport default class Portfolio extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPageData = () => {\n      axios.get('/api/getPage', {\n        params: {\n          pageId: this.props.pageId,\n          pageType: \"portfolio\"\n        }\n      }).then(response => {\n        this.setState({\n          title: response.data.title,\n          description: response.data.description,\n          imageNames: response.data.imageFileNames\n        }, () => {\n          this.getPortfolioImages();\n        });\n      });\n    };\n\n    this.getPortfolioImages = () => {\n      axios.get('/api/getPortfolioImages', {\n        params: {\n          imageNames: this.state.imageNames\n        }\n      }).then(response => {\n        this.setState({\n          images: response.data\n        });\n      });\n    };\n\n    this.showModal = () => {\n      this.setState({\n        showMod: !this.state.showMod\n      });\n    };\n\n    this.state = {\n      title: '',\n      description: '',\n      imageNames: [],\n      images: [],\n      showMod: false,\n      modalImage: {},\n      imageKey: -1\n    };\n    this.changeModalStateInfo = this.changeModalStateInfo.bind(this);\n    this.showModal = this.showModal.bind(this);\n    this.getPageData = this.getPageData.bind(this);\n    this.getPortfolioImages = this.getPortfolioImages.bind(this);\n  }\n\n  componentDidMount() {\n    this.getPageData();\n  }\n\n  changeModalStateInfo(modalImage, modalKey) {\n    this.setState({\n      modalImage: modalImage,\n      imageKey: modalKey\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, this.state.images.map((image, index) => /*#__PURE__*/React.createElement(Image, {\n      key: index,\n      imgKey: index,\n      img: image,\n      description: \"A painting\",\n      changeModalStateInfo: this.changeModalStateInfo,\n      showModal: this.showModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(PortfolioModal, {\n      onClose: this.showModal,\n      images: this.state.images,\n      show: this.state.showMod,\n      img: this.state.modalImage,\n      modalKey: this.state.imageKey,\n      changeModalStateInfo: this.changeModalStateInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\nPortfolio.propTypes = {\n  pageId: PropTypes.string\n};\n\nclass Image extends Component {\n  constructor(props) {\n    super(props);\n\n    this.clickImage = () => {\n      this.props.changeModalStateInfo(this.props.img, this.props.imgKey);\n      this.props.showModal();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ImageErrorBoundary, {\n      src: images(`./${this.props.img.fileName}`),\n      description: this.props.description,\n      onClick: this.clickImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nImage.propTypes = {\n  showModal: PropTypes.func.isRequired,\n  changeModalStateInfo: PropTypes.func.isRequired,\n  imgKey: PropTypes.number,\n  description: PropTypes.string,\n  img: PropTypes.object\n};\n\nclass ImageErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    // Display fallback UI\n    this.setState({\n      hasError: true\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return /*#__PURE__*/React.createElement(\"img\", {\n        src: \"App/upload/defaultImage.png\",\n        className: \"portfolioImage\",\n        alt: \"This image did not load\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"img\", {\n      className: \"portfolioImage\",\n      src: images(`./${this.props.img.fileName}`),\n      description: this.props.description,\n      onClick: this.props.clickImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    });\n  }\n\n} // a different modal component is used here because it needs to be able to \n// flip through images\n\n\nclass PortfolioModal extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onClose = e => {\n      this.props.onClose && this.props.onClose(e);\n    };\n\n    this.incrementImage = () => {\n      var newKey;\n      var newImage;\n\n      if (this.props.modalKey < this.props.images.length - 1) {\n        newKey = this.props.modalKey + 1;\n        newImage = this.props.images[newKey];\n        this.props.changeModalStateInfo(newImage, newKey);\n      }\n    };\n\n    this.decrementImage = () => {\n      var newKey;\n      var newImage;\n\n      if (this.props.modalKey > 0) {\n        newKey = this.props.modalKey - 1;\n        newImage = this.props.images[newKey];\n        this.props.changeModalStateInfo(newImage, newKey);\n      }\n    };\n  }\n\n  render() {\n    if (!this.props.show) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal\",\n      id: \"modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"close\",\n      onClick: this.onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }\n    }, \"\\xD7\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inner-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"arrow-container inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"arrow\",\n      onClick: () => this.decrementImage(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 25\n      }\n    }, \"\\u2190\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-content inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"zoomed-image\",\n      src: images(`./${this.props.img.fileName}`),\n      alt: \"artwork\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"portfolioImgTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 29\n      }\n    }, this.props.img.title), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"portfolioImgInfo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 29\n      }\n    }, this.props.img.size ? this.props.img.size : \"\", \"  \", this.props.img.medium ? this.props.img.medium : \"\", \"  \", this.props.img.price ? \"$\" + this.props.img.price : \"\", \"  \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 207\n      }\n    }, this.props.img.date ? this.props.img.date : \"\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"arrow-container inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inline arrow\",\n      onClick: () => this.incrementImage(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 25\n      }\n    }, \"\\u2192\"))));\n  }\n\n}\n\nPortfolioModal.propTypes = {\n  images: PropTypes.array,\n  modalKey: PropTypes.number,\n  img: PropTypes.object,\n  onClose: PropTypes.func.isRequired,\n  show: PropTypes.bool.isRequired\n};","map":{"version":3,"sources":["/Users/Steven/CS-Projects/portfolio-template/portfolioWebsite/client/src/App/pages/portfolio.js"],"names":["React","Component","PropTypes","axios","Modal","listOfImages","images","require","context","Portfolio","constructor","props","getPageData","get","params","pageId","pageType","then","response","setState","title","data","description","imageNames","imageFileNames","getPortfolioImages","state","showModal","showMod","modalImage","imageKey","changeModalStateInfo","bind","componentDidMount","modalKey","render","map","image","index","propTypes","string","Image","clickImage","img","imgKey","fileName","func","isRequired","number","object","ImageErrorBoundary","hasError","componentDidCatch","error","info","PortfolioModal","onClose","e","incrementImage","newKey","newImage","length","decrementImage","show","size","medium","price","date","array","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport axios from 'axios';\nimport Modal from 'App/pages/modal'\nvar listOfImages =[];\nconst images = require.context('App/upload', true);\n\nexport default class Portfolio extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            title:'',\n            description:'',\n            imageNames:[],\n            images:[],\n            showMod: false,\n            modalImage:{},\n            imageKey:-1\n          };\n        this.changeModalStateInfo = this.changeModalStateInfo.bind(this);\n        this.showModal=this.showModal.bind(this);\n        this.getPageData=this.getPageData.bind(this);\n        this.getPortfolioImages=this.getPortfolioImages.bind(this);\n    }\n    componentDidMount(){\n        this.getPageData();\n    }\n\n    getPageData = () =>{\n        axios.get('/api/getPage', { params: {pageId: this.props.pageId, pageType:\"portfolio\" } })\n        .then((response) => {\n          this.setState({\n            title:response.data.title, \n            description:response.data.description, \n            imageNames:response.data.imageFileNames, \n            }, ()=>{this.getPortfolioImages()});\n        });\n    }\n\n    getPortfolioImages = () => {\n        axios.get(\n            '/api/getPortfolioImages', \n            { params: {imageNames:this.state.imageNames} }\n        ).then((response)=>{\n            this.setState({images:response.data})\n        });\n    }\n\n\n    changeModalStateInfo(modalImage, modalKey) {\n        this.setState({\n            modalImage: modalImage,\n            imageKey:modalKey\n        })\n    }\n\n    showModal = () => {\n        this.setState({\n            showMod: !this.state.showMod\n        });\n    };\n    \n    render(){\n        return(\n          <div className=\"row\">\n              {\n                this.state.images.map(\n                    (image, index) =>   \n                        <Image key={index} imgKey={index} img={image} description=\"A painting\" changeModalStateInfo={this.changeModalStateInfo} showModal={this.showModal}></Image>\n                )\n              }\n            <PortfolioModal onClose={this.showModal} images={this.state.images} show={this.state.showMod} img={this.state.modalImage} modalKey={this.state.imageKey} changeModalStateInfo={this.changeModalStateInfo}/>\n\n          </div>\n        )\n    }\n}\n\nPortfolio.propTypes = {\n  pageId: PropTypes.string\n};\n\nclass Image extends Component {\n    constructor(props){\n        super(props);\n    }\n\n    clickImage = () => {\n        this.props.changeModalStateInfo(this.props.img, this.props.imgKey);\n        this.props.showModal(); \n    }\n\n    render() {\n        return (\n            <div className=\"column\">\n                <div className=\"content\">\n                    <ImageErrorBoundary src={images(`./${this.props.img.fileName}`)} description={this.props.description} onClick = {this.clickImage}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nImage.propTypes = {\n    showModal:PropTypes.func.isRequired,\n    changeModalStateInfo:PropTypes.func.isRequired,\n    imgKey:PropTypes.number,\n    description:PropTypes.string,\n    img:PropTypes.object\n}\n\n\nclass ImageErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    // Display fallback UI\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <img src=\"App/upload/defaultImage.png\" className=\"portfolioImage\" alt=\"This image did not load\"/>\n      )\n    }\n    return (\n        <img className=\"portfolioImage\" src={images(`./${this.props.img.fileName}`)} description={this.props.description} onClick = {this.props.clickImage}/>\n    )\n  }\n}\n\n// a different modal component is used here because it needs to be able to \n// flip through images\nclass PortfolioModal extends Component {\n\n    onClose = e => {\n        this.props.onClose && this.props.onClose(e);\n      };\n\n    incrementImage = () => {\n        var newKey;\n        var newImage;\n        if ((this.props.modalKey<this.props.images.length-1)){\n            newKey = this.props.modalKey+1;\n            newImage = this.props.images[newKey];\n            this.props.changeModalStateInfo(newImage, newKey);\n        }\n    }\n\n    decrementImage = () => {\n        var newKey;\n        var newImage;\n        if ((this.props.modalKey>0)){\n            newKey = this.props.modalKey-1;\n            newImage = this.props.images[newKey];\n            this.props.changeModalStateInfo(newImage, newKey);\n        }\n\n    }\n  \n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n        return (\n            <div className=\"modal\" id=\"modal\">\n                <div className=\"modal-header\">\n                    <span className=\"close\" onClick={this.onClose}>&times;</span>\n                </div>\n                <div className=\"inner-modal\">\n                    <div className=\"arrow-container inline\">\n                        <div className=\"arrow\" onClick={()=>this.decrementImage()}>&larr;</div>\n                    </div>\n                    <div className=\"modal-content inline\">\n                        <div className=\"inline\">\n                            <img className=\"zoomed-image\" src={images(`./${this.props.img.fileName}`)} alt=\"artwork\"/>\n                            <h3 className=\"portfolioImgTitle\">\n                                {this.props.img.title}\n                            </h3>\n                            <h4 className=\"portfolioImgInfo\">\n                                { (this.props.img.size) ? this.props.img.size : \"\" }  { (this.props.img.medium) ? this.props.img.medium : \"\"}  {  (this.props.img.price) ? (\"$\"+this.props.img.price) : \"\" }  <i>{  (this.props.img.date) ? this.props.img.date : \"\" }</i>\n                            </h4>\n\n                        </div>\n                    </div>\n                    <div className=\"arrow-container inline\">\n                        <div className=\"inline arrow\" onClick={()=>this.incrementImage()}>&rarr;</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nPortfolioModal.propTypes = {\n    images:PropTypes.array,\n    modalKey:PropTypes.number,\n    img:PropTypes.object,\n    onClose: PropTypes.func.isRequired,\n    show: PropTypes.bool.isRequired\n  };"]},"metadata":{},"sourceType":"module"}