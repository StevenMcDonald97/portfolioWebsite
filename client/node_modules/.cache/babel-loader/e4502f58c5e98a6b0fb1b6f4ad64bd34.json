{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport axios from 'axios';\nconst currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\nexport const authenticationService = {\n  login,\n  logout,\n  currentUser: currentUserSubject.asObservable(),\n\n  get currentUserValue() {\n    return currentUserSubject.value;\n  }\n\n};\n\nfunction login(email, password) {\n  axios.post(`/user/authenticate`, {\n    email: email,\n    password: password\n  }).then(handleResponse).then(response => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('currentUser', JSON.stringify(response.token));\n    currentUserSubject.next(response);\n    this.props.history.push('/userPanel');\n    return response;\n  }).catch(err => {\n    alert(\"Login info is incorrect!\");\n    return {};\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('currentUser');\n  currentUserSubject.next(null);\n}\n\nfunction handleResponse(response) {\n  const data = response.data; // if (!response.ok) {\n  //     if ([401, 403].indexOf(response.status) !== -1) {\n  //         // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n  //         logout();\n  //         // location.reload(true);\n  //     }\n  //     const error = (data && data.message) || response.statusText;\n  //     return Promise.reject(error);\n  // }\n\n  return data;\n}","map":{"version":3,"sources":["/Users/Steven/CS-Projects/portfolio-template/portfolioWebsite/client/src/App/admin/authentication/authenticationService.js"],"names":["BehaviorSubject","axios","currentUserSubject","JSON","parse","localStorage","getItem","authenticationService","login","logout","currentUser","asObservable","currentUserValue","value","email","password","post","then","handleResponse","response","setItem","stringify","token","next","props","history","push","catch","err","alert","removeItem","data"],"mappings":"AAAA,SAASA,eAAT,QAAgC,MAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,kBAAkB,GAAG,IAAIF,eAAJ,CAAoBG,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CAApB,CAA3B;AAEA,OAAO,MAAMC,qBAAqB,GAAG;AACjCC,EAAAA,KADiC;AAEjCC,EAAAA,MAFiC;AAGjCC,EAAAA,WAAW,EAAER,kBAAkB,CAACS,YAAnB,EAHoB;;AAIjC,MAAIC,gBAAJ,GAAwB;AAAE,WAAOV,kBAAkB,CAACW,KAA1B;AAAiC;;AAJ1B,CAA9B;;AAOP,SAASL,KAAT,CAAeM,KAAf,EAAsBC,QAAtB,EAAgC;AAC5Bd,EAAAA,KAAK,CAACe,IAAN,CAAY,oBAAZ,EAAiC;AAAEF,IAAAA,KAAK,EAACA,KAAR;AAAeC,IAAAA,QAAQ,EAACA;AAAxB,GAAjC,EACCE,IADD,CACMC,cADN,EAECD,IAFD,CAEME,QAAQ,IAAI;AACd;AACAd,IAAAA,YAAY,CAACe,OAAb,CAAqB,aAArB,EAAoCjB,IAAI,CAACkB,SAAL,CAAeF,QAAQ,CAACG,KAAxB,CAApC;AACApB,IAAAA,kBAAkB,CAACqB,IAAnB,CAAwBJ,QAAxB;AACA,SAAKK,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,YAAxB;AACA,WAAOP,QAAP;AACH,GARD,EAQGQ,KARH,CAQSC,GAAG,IAAI;AACZC,IAAAA,KAAK,CAAC,0BAAD,CAAL;AACA,WAAO,EAAP;AACH,GAXD;AAYH;;AAED,SAASpB,MAAT,GAAkB;AACd;AACAJ,EAAAA,YAAY,CAACyB,UAAb,CAAwB,aAAxB;AACA5B,EAAAA,kBAAkB,CAACqB,IAAnB,CAAwB,IAAxB;AACH;;AAED,SAASL,cAAT,CAAwBC,QAAxB,EAAkC;AAC9B,QAAMY,IAAI,GAAGZ,QAAQ,CAACY,IAAtB,CAD8B,CAG9B;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,SAAOA,IAAP;AAEH","sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport axios from 'axios';\n\nconst currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n\nexport const authenticationService = {\n    login,\n    logout,\n    currentUser: currentUserSubject.asObservable(),\n    get currentUserValue () { return currentUserSubject.value }\n};\n\nfunction login(email, password) {\n    axios.post(`/user/authenticate`, { email:email, password:password })\n    .then(handleResponse)\n    .then(response => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        localStorage.setItem('currentUser', JSON.stringify(response.token));\n        currentUserSubject.next(response);\n        this.props.history.push('/userPanel')\n        return response;\n    }).catch(err => {       \n        alert(\"Login info is incorrect!\");\n        return {};\n    });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    currentUserSubject.next(null);\n}\n\nfunction handleResponse(response) {   \n    const data = response.data;\n\n    // if (!response.ok) {\n\n    //     if ([401, 403].indexOf(response.status) !== -1) {\n    //         // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n    //         logout();\n    //         // location.reload(true);\n    //     }\n\n    //     const error = (data && data.message) || response.statusText;\n    //     return Promise.reject(error);\n    // }\n\n    return data;\n\n}"]},"metadata":{},"sourceType":"module"}